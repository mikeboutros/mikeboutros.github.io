!function(){"use strict";const s=1615942223128,e="cache"+s,t=["client/index.27368347.js","client/Landing.d20163d6.js","client/online-training.ffd39105.js","client/online-training-old.c2d70251.js","client/tech-skills-old.c5ed7115.js","client/List1.a301ff8a.js","client/List3.deb99a0c.js","client/List2.7abe3292.js","client/List5.9025516f.js","client/List4.734d200b.js","client/ListItem.d1906a98.js","client/tech-certs-old.aef13e86.js","client/List7.5449c917.js","client/List6.e18e6a1c.js","client/Landing-old.ca05097f.js","client/tech-skills.c8952e47.js","client/tech-certs.57acfd79.js","client/ProjectBox.790ec517.js","client/test-a.9c68cc9b.js","client/test-b.ebfea8cb.js","client/about.e80a6900.js","client/index.91ce18e6.js","client/[slug].6d821378.js","client/misc.2c2aee21.js","client/client.1c531e85.js","client/Projects.3cccfaac.js"].concat(["service-worker-index.html",".DS_Store","develop3.png","develop4.png","favicon.png","global.scss","manifest.json","microsoft_certified_professional_transcript.png","svg/.DS_Store","svg/angular.svg","svg/aplus.svg","svg/bootstrap.svg","svg/css.svg","svg/git.svg","svg/github.svg","svg/html.svg","svg/jquery.svg","svg/js.svg","svg/mysql.svg","svg/networkplus.svg","svg/novell.svg","svg/office.svg","svg/oracle.svg","svg/pcdata.svg","svg/python.svg","svg/react.svg","svg/ror.svg","svg/ruby.svg","svg/sap.svg","svg/sass.svg","svg/securityplus.svg","svg/svelte.svg"]),c=new Set(t);self.addEventListener("install",(s=>{s.waitUntil(caches.open(e).then((s=>s.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(s=>{s.waitUntil(caches.keys().then((async s=>{for(const t of s)t!==e&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&c.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline"+s).then((async s=>{try{const t=await fetch(e.request);return s.put(e.request,t.clone()),t}catch(t){const c=await s.match(e.request);if(c)return c;throw t}})))))}))}();
