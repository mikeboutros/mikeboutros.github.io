!function(){"use strict";const s=1615942491415,e="cache"+s,t=["client/index.6542a189.js","client/Landing.0101e412.js","client/online-training-old.2f1fb08a.js","client/online-training.7ad86c5f.js","client/tech-skills-old.6af85fc1.js","client/List1.c37b3d76.js","client/List2.af50ffd2.js","client/List3.3fd6f6f5.js","client/List4.3353802f.js","client/List5.3793a58c.js","client/ListItem.4f9ded29.js","client/tech-certs-old.d3eeb757.js","client/Landing-old.9ad659da.js","client/List6.093ae5b8.js","client/List7.1a74d6a5.js","client/tech-skills.9f7ef5a1.js","client/tech-certs.f3a8fc61.js","client/ProjectBox.96af8b2a.js","client/test-a.1bc48338.js","client/test-b.5f72e883.js","client/about.4c0d3dbf.js","client/index.f6de871a.js","client/[slug].401cb058.js","client/misc.d3bb48e5.js","client/client.ae33c828.js","client/Projects.3c114208.js"].concat(["service-worker-index.html",".DS_Store","develop3.png","develop4.png","favicon.png","global.scss","manifest.json","microsoft_certified_professional_transcript.png","svg/.DS_Store","svg/angular.svg","svg/aplus.svg","svg/bootstrap.svg","svg/css.svg","svg/git.svg","svg/github.svg","svg/html.svg","svg/jquery.svg","svg/js.svg","svg/mysql.svg","svg/networkplus.svg","svg/novell.svg","svg/office.svg","svg/oracle.svg","svg/pcdata.svg","svg/python.svg","svg/react.svg","svg/ror.svg","svg/ruby.svg","svg/sap.svg","svg/sass.svg","svg/securityplus.svg","svg/svelte.svg"]),c=new Set(t);self.addEventListener("install",(s=>{s.waitUntil(caches.open(e).then((s=>s.addAll(t))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(s=>{s.waitUntil(caches.keys().then((async s=>{for(const t of s)t!==e&&await caches.delete(t);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&c.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline"+s).then((async s=>{try{const t=await fetch(e.request);return s.put(e.request,t.clone()),t}catch(t){const c=await s.match(e.request);if(c)return c;throw t}})))))}))}();
